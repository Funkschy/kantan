import io

type Person struct {
    name: string,
    age: i32
}

type Node struct {
    data: Person,
    left: *Node,
    right: *Node
}

type Tree struct {
    root: *Node
}

fn insert(tree: *Tree, person: Person): void {
    if tree.root == null {
        tree.root = new_node(person);
        return;
    } 

    insert_node(tree.root, person);
}

fn new_node(person: Person): *Node {
    return new Node { data: person, left: null, right: null };
}

fn insert_node(node: *Node, person: Person): void {
    if node.data.age == person.age {
        return;
    }

    if person.age < node.data.age {
        if node.left == null {
            node.left = new_node(person);
        } else {
            insert_node(node.left, person);
        }
    } else {
        if node.right == null {
            node.right = new_node(person);
        } else {
            insert_node(node.right, person);
        }
    }
}

fn traverse(tree: *Tree): void {
    if tree.root == null {
        return;
    }

    traverse_node(tree.root);
}

fn traverse_node(node: *Node): void {
    if node == null {
        return;
    }

    traverse_node(node.left);
    io.printf("%s is %d years old\n", node.data.name, node.data.age);
    traverse_node(node.right);
}

fn delete_tree(tree: *Tree): void {
    if tree.root == null {
        return;
    }

    delete_node(tree.root);
}

fn delete_node(node: *Node): void {
    if node == null {
        return;
    }

    delete_node(node.left);
    delete_node(node.right);
    delete node;
}

fn main(): void {
    let tree = new Tree { root: null };
    insert(tree, Person { name: "Jan", age: 22 });
    insert(tree, Person { name: "Felix", age: 20 });
    insert(tree, Person { name: "Robin", age: 23 });

    traverse(tree);

    delete_tree(tree);
    delete tree;
}
